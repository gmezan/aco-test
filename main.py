import numpy as np
from vmp_impl import *
import matplotlib.pyplot as plt
from utils import *

NUMBER_OF_ANTS = 8
N_ITERS = 100
ALPHA = 1.0
BETA = 1.2
RHO = 0.04
KP_FIRST = False
PLOT = True
W1 = 1
W2 = 1
W3 = 2.0

def ins00():
    c = [[24, 88], [40, 72], [32, 64]]
    p = [2, 1, 1, 1, 1, 2, 1, 1, 2, 1]
    w = [[2.0, 2.0], [8.0, 24.0], [6.0, 1.0], [10.0, 0.5], [12.0, 2.0], [1.0, 24.0], [24.0, 8.0], [6.0, 4.0], [10.0, 8.0], [6.0, 10.0]]
    oc = [[16.0, 5.0], [16.0, 5.0], [16.0, 5.0]]
    NUMBER_OF_ANTS = 6
    N_ITERS = 50
    ALPHA = 1.0
    BETA = 1.2
    RHO = 0.02
    KP_FIRST = False
    W1 = 1
    W2 = 1
    W3 = 2.0
    return c,p,w,oc, NUMBER_OF_ANTS, N_ITERS, ALPHA, BETA, RHO, KP_FIRST, W1, W2, W3


# 45 VMs, 10 PMs, 2 D
def ins01():
    c = [[40.0, 48.0], [40.0, 48.0], [40.0, 48.0], [40.0, 48.0], [40.0, 48.0], [40.0, 48.0], [40.0, 48.0], [40.0, 48.0], [40.0, 48.0], [40.0, 48.0]]
    p = [2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2]
    w = [[12.0, 0.5], [2.0, 4.0], [2.0, 10.0], [1.0, 4.0], [2.0, 12.0], [10.0, 12.0], [1.0, 0.5], [1.0, 64.0], [8.0, 6.0], [12.0, 6.0], [6.0, 6.0], [12.0, 2.0], [4.0, 1.0], [8.0, 6.0], [24.0, 64.0], [12.0, 10.0], [1.0, 64.0], [8.0, 6.0], [4.0, 8.0], [10.0, 4.0], [24.0, 4.0], [8.0, 6.0], [8.0, 64.0], [12.0, 0.5], [4.0, 64.0], [6.0, 10.0], [6.0, 1.0], [4.0, 24.0], [12.0, 64.0], [10.0, 32.0], [24.0, 8.0], [12.0, 6.0], [12.0, 64.0], [24.0, 32.0], [8.0, 24.0], [1.0, 0.5], [2.0, 10.0], [12.0, 2.0], [1.0, 32.0], [4.0, 12.0], [4.0, 24.0], [8.0, 64.0], [10.0, 10.0], [0.5, 0.5], [1.0, 8.0]]
    oc = [[16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0]]
    NUMBER_OF_ANTS = 8
    N_ITERS = 50
    ALPHA = 1.0
    BETA = 1.2
    RHO = 0.02
    KP_FIRST = False
    W1 = 1
    W2 = 1
    W3 = 2.0

    return c,p,w,oc, NUMBER_OF_ANTS, N_ITERS, ALPHA, BETA, RHO, KP_FIRST, W1, W2, W3

# generate_vmp_instance(40,4,2)
def ins02():
    c = [[24.0, 100.0], [24.0, 100.0], [24.0, 100.0], [24.0, 100.0]]
    p = [1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1]
    w = [[4.0, 4.0], [4.0, 6.0], [6.0, 6.0], [4.0, 1.0], [24.0, 0.5], [10.0, 4.0], [6.0, 1.0], [10.0, 4.0], [8.0, 64.0], [12.0, 2.0], [12.0, 8.0], [8.0, 12.0], [2.0, 6.0], [24.0, 32.0], [6.0, 4.0], [4.0, 10.0], [4.0, 2.0], [12.0, 0.5], [1.0, 2.0], [12.0, 1.0], [1.0, 24.0], [6.0, 0.5], [2.0, 6.0], [2.0, 0.5], [6.0, 1.0], [12.0, 4.0], [2.0, 12.0], [4.0, 4.0], [4.0, 8.0], [1.0, 32.0], [0.5, 6.0], [0.5, 32.0], [2.0, 0.5], [24.0, 24.0], [4.0, 10.0], [1.0, 4.0], [6.0, 24.0], [24.0, 1.0], [10.0, 10.0], [2.0, 1.0]]
    oc = [[16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0]]
    NUMBER_OF_ANTS = 10
    N_ITERS = 150
    ALPHA = 1.0
    BETA = 3
    RHO = 0.05
    KP_FIRST = False
    W1 = 1
    W2 = 1
    W3 = 2.0

    return c,p,w,oc, NUMBER_OF_ANTS, N_ITERS, ALPHA, BETA, RHO, KP_FIRST, W1, W2, W3

# generate_vmp_instance(30,5,2)
def ins03():
    c = [[16.0, 80.0], [16.0, 80.0], [16.0, 80.0], [16.0, 80.0], [16.0, 80.0]]
    p = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2]
    w = [[8.0, 12.0], [0.5, 12.0], [12.0, 12.0], [2.0, 0.5], [10.0, 32.0], [6.0, 64.0], [1.0, 4.0], [2.0, 0.5], [1.0, 6.0], [2.0, 2.0], [8.0, 64.0], [8.0, 8.0], [10.0, 24.0], [24.0, 0.5], [1.0, 64.0], [24.0, 12.0], [10.0, 10.0], [0.5, 1.0], [2.0, 4.0], [1.0, 32.0], [0.5, 4.0], [10.0, 8.0], [1.0, 64.0], [1.0, 4.0], [1.0, 1.0], [2.0, 32.0], [0.5, 24.0], [6.0, 32.0], [1.0, 4.0], [6.0, 0.5]]
    oc = [[16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0]]
    NUMBER_OF_ANTS = 10
    N_ITERS = 75
    ALPHA = 1.0
    BETA = 3
    RHO = 0.02
    KP_FIRST = False
    W1 = 1
    W2 = 1
    W3 = 1.5

    return c,p,w,oc, NUMBER_OF_ANTS, N_ITERS, ALPHA, BETA, RHO, KP_FIRST, W1, W2, W3

def ins04():
    c = [[40, 72], [40, 72], [24, 72], [40, 88], [40, 88], [32, 72]]
    p = [2, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2]
    w = [[4.0, 4.0], [24.0, 4.0], [8.0, 12.0], [2.0, 6.0], [8.0, 1.0], [2.0, 0.5], [24.0, 24.0], [1.0, 8.0], [12.0, 32.0], [12.0, 0.5], [1.0, 8.0], [1.0, 24.0], [8.0, 2.0], [2.0, 32.0], [12.0, 0.5], [24.0, 2.0], [1.0, 4.0], [1.0, 1.0], [8.0, 32.0], [24.0, 1.0], [24.0, 32.0], [12.0, 0.5], [0.5, 10.0], [6.0, 24.0], [8.0, 32.0], [12.0, 6.0], [2.0, 2.0], [10.0, 1.0], [8.0, 1.0], [8.0, 4.0], [1.0, 2.0], [6.0, 10.0], [8.0, 2.0], [1.0, 6.0], [6.0, 0.5], [6.0, 1.0], [1.0, 4.0], [10.0, 6.0], [8.0, 8.0], [1.0, 0.5]]
    oc = [[16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0]]
    NUMBER_OF_ANTS = 10
    N_ITERS = 75
    ALPHA = 1.0
    BETA = 3
    RHO = 0.02
    KP_FIRST = False
    W1 = 1
    W2 = 1
    W3 = 1.5
    return c,p,w,oc, NUMBER_OF_ANTS, N_ITERS, ALPHA, BETA, RHO, KP_FIRST, W1, W2, W3

def ins05():
    c = [[24, 64], [32, 64], [24, 88], [40, 72], [32, 72], [32, 72], [24, 88], [32, 80]]
    p = [1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1]
    w = [[2.0, 10.0], [24.0, 32.0], [4.0, 2.0], [1.0, 1.0], [0.5, 2.0], [0.5, 12.0], [4.0, 64.0], [24.0, 1.0], [0.5, 6.0], [0.5, 12.0], [12.0, 32.0], [2.0, 8.0], [12.0, 1.0], [4.0, 64.0], [6.0, 8.0], [10.0, 12.0], [6.0, 64.0], [24.0, 8.0], [2.0, 10.0], [24.0, 2.0], [10.0, 6.0], [8.0, 64.0], [12.0, 2.0], [1.0, 2.0], [1.0, 8.0], [1.0, 2.0], [6.0, 32.0], [24.0, 2.0], [0.5, 24.0], [4.0, 10.0], [0.5, 32.0], [8.0, 4.0], [12.0, 8.0], [2.0, 8.0], [8.0, 4.0], [2.0, 1.0], [1.0, 1.0], [2.0, 4.0], [8.0, 0.5], [6.0, 10.0], [10.0, 64.0], [4.0, 2.0], [0.5, 24.0], [4.0, 0.5], [2.0, 1.0], [10.0, 0.5], [6.0, 24.0], [24.0, 4.0], [6.0, 64.0], [10.0, 2.0], [4.0, 12.0], [0.5, 64.0], [10.0, 8.0], [1.0, 24.0], [0.5, 64.0], [0.5, 0.5], [8.0, 2.0], [1.0, 8.0], [0.5, 64.0], [1.0, 8.0]]
    oc = [[16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0]]
    NUMBER_OF_ANTS = 10
    N_ITERS = 75
    ALPHA = 1.0
    BETA = 3
    RHO = 0.02
    KP_FIRST = False
    W1 = 1
    W2 = 1
    W3 = 1.5
    return c,p,w,oc, NUMBER_OF_ANTS, N_ITERS, ALPHA, BETA, RHO, KP_FIRST, W1, W2, W3

# generate_vmp_instance(60,8,3)
def ins06():
    c = [[32, 80, 96], [40, 88, 96], [40, 80, 48], [24, 80, 32], [40, 64, 32], [24, 88, 32], [32, 72, 96], [32, 72, 32]]
    p = [1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2]
    w = [[1.0, 2.0, 1], [8.0, 0.5, 10], [1.0, 6.0, 12], [6.0, 1.0, 20], [4.0, 4.0, 16], [12.0, 8.0, 18], [24.0, 4.0, 2], [0.5, 1.0, 18], [2.0, 64.0, 20], [2.0, 2.0, 12], [24.0, 1.0, 12], [0.5, 4.0, 10], [8.0, 12.0, 10], [8.0, 6.0, 14], [6.0, 0.5, 14], [10.0, 12.0, 12], [4.0, 24.0, 20], [6.0, 1.0, 4], [6.0, 4.0, 18], [1.0, 1.0, 16], [12.0, 1.0, 10], [24.0, 64.0, 20], [6.0, 0.5, 2], [6.0, 12.0, 10], [10.0, 1.0, 10], [12.0, 4.0, 12], [6.0, 8.0, 2], [10.0, 1.0, 14], [10.0, 24.0, 4], [2.0, 6.0, 4], [0.5, 10.0, 10], [12.0, 8.0, 1], [2.0, 2.0, 6], [1.0, 32.0, 1], [4.0, 10.0, 4], [0.5, 24.0, 12], [6.0, 6.0, 1], [2.0, 6.0, 4], [12.0, 32.0, 20], [6.0, 8.0, 12], [2.0, 10.0, 16], [12.0, 32.0, 8], [8.0, 6.0, 2], [8.0, 2.0, 16], [6.0, 2.0, 18], [24.0, 32.0, 16], [10.0, 6.0, 14], [12.0, 32.0, 10], [4.0, 10.0, 18], [2.0, 8.0, 8], [8.0, 6.0, 4], [10.0, 24.0, 8], [8.0, 1.0, 14], [8.0, 6.0, 12], [2.0, 6.0, 1], [10.0, 12.0, 1], [10.0, 6.0, 2], [8.0, 0.5, 14], [8.0, 12.0, 18], [2.0, 12.0, 18]]
    oc = [[16.0, 5.0, 4.0], [16.0, 5.0, 4.0], [16.0, 5.0, 4.0], [16.0, 5.0, 4.0], [16.0, 5.0, 4.0], [16.0, 5.0, 4.0], [16.0, 5.0, 4.0], [16.0, 5.0, 4.0]]
    NUMBER_OF_ANTS = 10
    N_ITERS = 75
    ALPHA = 1.0
    BETA = 3
    RHO = 0.02
    KP_FIRST = False
    W1 = 1
    W2 = 1
    W3 = 1.5
    return c,p,w,oc, NUMBER_OF_ANTS, N_ITERS, ALPHA, BETA, RHO, KP_FIRST, W1, W2, W3

# generate_vmp_instance(50,8,2)
def ins06_5():
    c = [[40, 88], [40, 80], [24, 88], [32, 88], [24, 64], [24, 72], [40, 88], [24, 80]]
    p = [2, 1, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2]
    w = [[24.0, 32.0], [1.0, 64.0], [8.0, 0.5], [8.0, 1.0], [24.0, 0.5], [8.0, 32.0], [2.0, 32.0], [6.0, 4.0], [12.0, 24.0], [4.0, 64.0], [10.0, 32.0], [12.0, 4.0], [8.0, 24.0], [12.0, 0.5], [4.0, 12.0], [8.0, 0.5], [0.5, 32.0], [12.0, 64.0], [8.0, 12.0], [0.5, 1.0], [12.0, 24.0], [4.0, 64.0], [6.0, 6.0], [24.0, 1.0], [0.5, 2.0], [12.0, 2.0], [1.0, 64.0], [24.0, 4.0], [12.0, 6.0], [8.0, 8.0], [4.0, 8.0], [4.0, 0.5], [6.0, 64.0], [8.0, 12.0], [6.0, 0.5], [6.0, 6.0], [0.5, 64.0], [10.0, 12.0], [8.0, 2.0], [4.0, 8.0], [6.0, 24.0], [12.0, 24.0], [24.0, 10.0], [1.0, 1.0], [1.0, 6.0], [1.0, 12.0], [8.0, 32.0], [8.0, 2.0], [1.0, 12.0], [12.0, 6.0]]
    oc = [[16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0]]
    NUMBER_OF_ANTS = 10
    N_ITERS = 80
    ALPHA = 1.0
    BETA = 3
    RHO = 0.02
    KP_FIRST = False
    W1 = 1
    W2 = 1
    W3 = 1.5
    return c,p,w,oc, NUMBER_OF_ANTS, N_ITERS, ALPHA, BETA, RHO, KP_FIRST, W1, W2, W3

# generate_vmp_instance(20,4,3)
def ins07_5():
    c = [[32, 80, 32], [40, 64, 48], [24, 72, 48], [32, 72, 48]]
    p = [1, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1]
    w = [[0.5, 1.0, 4], [10.0, 1.0, 12], [12.0, 8.0, 12], [4.0, 4.0, 10], [12.0, 32.0, 20], [12.0, 6.0, 18], [24.0, 6.0, 10], [1.0, 2.0, 18], [4.0, 4.0, 1], [6.0, 64.0, 8], [12.0, 8.0, 6], [6.0, 10.0, 8], [6.0, 2.0, 20], [12.0, 12.0, 14], [24.0, 1.0, 14], [4.0, 32.0, 10], [12.0, 32.0, 4], [2.0, 32.0, 16], [24.0, 6.0, 8], [24.0, 10.0, 4]]
    oc = [[16.0, 5.0, 4.0], [16.0, 5.0, 4.0], [16.0, 5.0, 4.0], [16.0, 5.0, 4.0]]
    NUMBER_OF_ANTS = 10
    N_ITERS = 75
    ALPHA = 1.0
    BETA = 3
    RHO = 0.02
    KP_FIRST = False
    W1 = 1
    W2 = 1
    W3 = 1.5
    return c,p,w,oc, NUMBER_OF_ANTS, N_ITERS, ALPHA, BETA, RHO, KP_FIRST, W1, W2, W3

# generate_vmp_instance(16,4,3)
def ins07():
    c = [[40, 80, 40], [32, 72, 96], [40, 80, 96], [24, 88, 40]]
    p = [1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 1]
    w = [[12.0, 24.0, 10], [1.0, 32.0, 12], [1.0, 4.0, 10], [1.0, 24.0, 16], [10.0, 64.0, 6], [10.0, 0.5, 16], [8.0, 8.0, 1], [24.0, 10.0, 18], [1.0, 10.0, 8], [24.0, 64.0, 6], [1.0, 0.5, 20], [4.0, 32.0, 1], [24.0, 6.0, 4], [1.0, 1.0, 14], [0.5, 2.0, 14], [10.0, 8.0, 10]]
    oc = [[16.0, 5.0, 4.0], [16.0, 5.0, 4.0], [16.0, 5.0, 4.0], [16.0, 5.0, 4.0]]
    NUMBER_OF_ANTS = 10
    N_ITERS = 75
    ALPHA = 1.0
    BETA = 3
    RHO = 0.02
    KP_FIRST = False
    W1 = 1
    W2 = 1
    W3 = 1.5
    return c,p,w,oc, NUMBER_OF_ANTS, N_ITERS, ALPHA, BETA, RHO, KP_FIRST, W1, W2, W3

# generate_vmp_instance(60,8,3)
def ins08():
    c = [[32, 72], [32, 80], [40, 72], [24, 64], [24, 80], [24, 64], [40, 88], [40, 88]]
    p = [2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1]
    w = [[0.5, 4.0], [0.5, 10.0], [8.0, 4.0], [1.0, 1.0], [1.0, 1.0], [8.0, 2.0], [1.0, 12.0], [12.0, 0.5], [10.0, 10.0], [2.0, 4.0], [8.0, 6.0], [0.5, 4.0], [8.0, 4.0], [12.0, 8.0], [4.0, 64.0], [12.0, 0.5], [24.0, 4.0], [0.5, 4.0], [24.0, 32.0], [8.0, 6.0], [8.0, 8.0], [24.0, 24.0], [12.0, 32.0], [1.0, 10.0], [8.0, 64.0], [6.0, 24.0], [0.5, 6.0], [10.0, 64.0], [6.0, 32.0], [0.5, 8.0], [1.0, 1.0], [8.0, 8.0], [6.0, 4.0], [1.0, 0.5], [1.0, 64.0], [10.0, 64.0], [6.0, 2.0], [12.0, 2.0], [2.0, 8.0], [8.0, 64.0], [24.0, 32.0], [8.0, 10.0], [10.0, 12.0], [12.0, 4.0], [1.0, 8.0], [12.0, 0.5], [8.0, 24.0], [8.0, 64.0], [24.0, 6.0], [1.0, 4.0]]
    oc = [[16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0]]
    NUMBER_OF_ANTS = 8
    N_ITERS = 100
    ALPHA = 1.0
    BETA = 3
    RHO = 0.02
    KP_FIRST = False
    W1 = 1
    W2 = 1
    W3 = 1.5
    return c,p,w,oc, NUMBER_OF_ANTS, N_ITERS, ALPHA, BETA, RHO, KP_FIRST, W1, W2, W3

# generate_vmp_instance(100,12,2)
def ins09():
    c = [[40, 88], [24, 64], [40, 88], [32, 88], [32, 80], [40, 72], [24, 72], [24, 72], [32, 80], [32, 64], [32, 64], [40, 88]]
    p = [1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1]
    w = [[0.5, 4.0], [1.0, 8.0], [10.0, 32.0], [12.0, 10.0], [8.0, 32.0], [10.0, 4.0], [6.0, 24.0], [6.0, 10.0], [0.5, 1.0], [1.0, 0.5], [2.0, 1.0], [12.0, 6.0], [24.0, 8.0], [1.0, 1.0], [1.0, 32.0], [0.5, 32.0], [12.0, 12.0], [1.0, 0.5], [2.0, 1.0], [1.0, 64.0], [2.0, 32.0], [6.0, 1.0], [2.0, 0.5], [1.0, 10.0], [1.0, 6.0], [6.0, 2.0], [12.0, 4.0], [6.0, 24.0], [8.0, 64.0], [10.0, 24.0], [24.0, 24.0], [8.0, 8.0], [12.0, 10.0], [8.0, 8.0], [8.0, 10.0], [1.0, 8.0], [6.0, 8.0], [4.0, 0.5], [4.0, 24.0], [4.0, 4.0], [24.0, 12.0], [4.0, 2.0], [1.0, 0.5], [2.0, 0.5], [10.0, 64.0], [2.0, 0.5], [2.0, 4.0], [0.5, 6.0], [24.0, 12.0], [4.0, 0.5], [1.0, 8.0], [1.0, 32.0], [8.0, 24.0], [2.0, 64.0], [10.0, 4.0], [2.0, 2.0], [6.0, 6.0], [2.0, 64.0], [24.0, 4.0], [0.5, 32.0], [0.5, 0.5], [8.0, 64.0], [6.0, 0.5], [1.0, 6.0], [2.0, 10.0], [12.0, 1.0], [6.0, 6.0], [2.0, 0.5], [10.0, 1.0], [10.0, 8.0], [1.0, 2.0], [10.0, 6.0], [1.0, 1.0], [8.0, 4.0], [6.0, 4.0], [10.0, 4.0], [0.5, 1.0], [1.0, 10.0], [4.0, 8.0], [8.0, 32.0], [0.5, 8.0], [12.0, 0.5], [1.0, 6.0], [1.0, 6.0], [8.0, 12.0], [1.0, 12.0], [2.0, 24.0], [10.0, 6.0], [4.0, 10.0], [1.0, 6.0], [2.0, 24.0], [24.0, 12.0], [0.5, 2.0], [2.0, 6.0], [10.0, 32.0], [6.0, 2.0], [6.0, 4.0], [12.0, 10.0], [8.0, 10.0], [8.0, 6.0]]
    oc = [[16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0], [16.0, 5.0]]
    NUMBER_OF_ANTS = 10
    N_ITERS = 100
    ALPHA = 1.0
    BETA = 3
    RHO = 0.02
    KP_FIRST = False
    W1 = 1
    W2 = 1
    W3 = 1.5
    return c,p,w,oc, NUMBER_OF_ANTS, N_ITERS, ALPHA, BETA, RHO, KP_FIRST, W1, W2, W3

def get_ins():
    return ins08()

def run_rr():
    c,p,w,oc,NUMBER_OF_ANTS,N_ITERS,ALPHA,BETA,RHO,KP_FIRST,W1,W2,W3 = get_ins()
    rr, evol_rr, sol_rr = round_robin_vmp(p=p, c=c, w=w, oc=oc, max_iter=N_ITERS)
    plot_vmp_solution1(rr, evol_rr)

def run_aco():
    c,p,w,oc,NUMBER_OF_ANTS,N_ITERS,ALPHA,BETA,RHO,KP_FIRST,W1,W2,W3 = get_ins()
    aco, evol_aco, sol_aco = aco_for_vmp_headless_2(p=p, c=c, w=w, oc=oc, n_ants=NUMBER_OF_ANTS, max_iter=N_ITERS, alpha=ALPHA, beta=BETA, rho=RHO, kp_first=KP_FIRST, w1=W1, w2=W2, w3=W3)
    plot_mkp_solution3(aco, evol_aco)

def run_greedy():
    c,p,w,oc,NUMBER_OF_ANTS,N_ITERS,ALPHA,BETA,RHO,KP_FIRST,W1,W2,W3 = get_ins()
    greedy, evol_greedy, sol_greedy = aco_for_vmp_headless_2(p=p, c=c, w=w, oc=oc, n_ants=NUMBER_OF_ANTS, max_iter=N_ITERS, alpha=0, beta=BETA, rho=RHO, kp_first=KP_FIRST, w1=W1, w2=W2, w3=W3)
    plot_vmp_solution1(greedy, evol_greedy)

def run_algorithms0():
    c,p,w,oc,NUMBER_OF_ANTS,N_ITERS,ALPHA,BETA,RHO,KP_FIRST,W1,W2,W3 = get_ins()
    aco, evol_aco, sol_aco = aco_for_vmp_headless_2(p=p, c=c, w=w, oc=oc, n_ants=NUMBER_OF_ANTS, max_iter=N_ITERS, alpha=ALPHA, beta=BETA, rho=RHO, kp_first=KP_FIRST, w1=W1, w2=W2, w3=W3)
    greedy, evol_greedy, sol_greedy = aco_for_vmp_headless_2(p=p, c=c, w=w, oc=oc, n_ants=NUMBER_OF_ANTS, max_iter=N_ITERS, alpha=0, beta=BETA, rho=RHO, kp_first=KP_FIRST, w1=W1, w2=W2, w3=W3)
    rr, evol_rr, sol_rr = round_robin_vmp(p=p, c=c, w=w, oc=oc, max_iter=N_ITERS)

    plt.plot(evol_aco, color='b')
    plt.plot(evol_greedy, color='r')
    plt.plot(evol_rr, color='g')
    plt.legend(["ACO-VMP", "Greedy", "Round Robin"])
    plt.title("Results")
    plt.xlabel('iterations')
    plt.ylabel('Objective')
    plt.show()

def run_algorithms1():
    c,p,w,oc,NUMBER_OF_ANTS,N_ITERS,ALPHA,BETA,RHO,KP_FIRST,W1,W2,W3 = get_ins()

    evol_aco = np.zeros(N_ITERS)
    evol_greedy = np.zeros(N_ITERS)

    C = 50

    for i in range(C):
        print("Running test: " + str(i))
        x_aco, x_evol_aco, sol_aco = aco_for_vmp_headless_2(p=p, c=c, w=w, oc=oc, n_ants=NUMBER_OF_ANTS, max_iter=N_ITERS, alpha=ALPHA, beta=BETA, rho=RHO, kp_first=KP_FIRST, w1=W1, w2=W2, w3=W3)
        x_greedy, x_evol_greedy, sol_greedy = aco_for_vmp_headless_2(p=p, c=c, w=w, oc=oc, n_ants=NUMBER_OF_ANTS, max_iter=N_ITERS, alpha=0, beta=BETA, rho=RHO, kp_first=KP_FIRST, w1=W1, w2=W2, w3=W3)
        evol_aco += x_evol_aco
        evol_greedy += x_evol_greedy

    evol_aco /=C
    evol_greedy /=C

    rr, evol_rr, sol_rr = round_robin_vmp(p=p, c=c, w=w, oc=oc, max_iter=N_ITERS)

    plt.plot(evol_aco, color='b')
    plt.plot(evol_greedy, color='r')
    plt.plot(evol_rr, color='g')
    plt.legend(["Avg ACO-VMP", "Avg Greedy", "Avg Round Robin"])
    plt.title("Results " + str(C) + " Experiments")
    plt.xlabel('iterations')
    plt.ylabel('Objective')
    plt.show()

def run_algorithms():
    c,p,w,oc,NUMBER_OF_ANTS,N_ITERS,ALPHA,BETA,RHO,KP_FIRST,W1,W2,W3 = get_ins()
    aco, evol_aco, sol_aco = aco_for_vmp_headless_2(p=p, c=c, w=w, oc=oc, n_ants=NUMBER_OF_ANTS, max_iter=N_ITERS, alpha=ALPHA, beta=BETA, rho=RHO, kp_first=KP_FIRST, w1=W1, w2=W2, w3=W3)
    greedy, evol_greedy, sol_greedy = aco_for_vmp_headless_2(p=p, c=c, w=w, oc=oc, n_ants=NUMBER_OF_ANTS, max_iter=N_ITERS, alpha=0, beta=BETA, rho=RHO, kp_first=KP_FIRST, w1=W1, w2=W2, w3=W3)
    rr, evol_rr, sol_rr = round_robin_vmp(p=p, c=c, w=w, oc=oc, max_iter=N_ITERS)
    total_vms = len(sol_aco)
    total_hpcs = len(sol_aco[sol_aco ==2])
    print("A: PROFIT: " + str(aco.best_fit_profit) + ", #HPC: " + str(total_hpcs) + ", BE: " + str(total_vms - total_hpcs))
    total_vms = len(sol_greedy)
    total_hpcs = len(sol_greedy[sol_greedy ==2])
    print("G: PROFIT: " + str(greedy.best_fit_profit) + ", #HPC: " + str(total_hpcs) + ", BE: " + str(total_vms - total_hpcs))
    total_vms = len(sol_rr)
    total_hpcs = len(sol_rr[sol_rr ==2])
    print("R: PROFIT: " + str(rr.best_fit_profit) + ", #HPC: " + str(total_hpcs) + ", BE: " + str(total_vms - total_hpcs))
    return [aco.best_fit_profit, greedy.best_fit_profit, rr.best_fit_profit]



run_algorithms1()